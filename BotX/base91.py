separator = "-"
dectab = (0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x49, 0x3e, 0x5b, 0x3f, 0x40, 0x41, 0x42, 90, 0x43, 0x44, 0x45, 70, 0x47, 0x5b, 0x48, 0x5b, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 60, 0x3d, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 80, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0x10, 0x11, 0x12, 0x13, 20, 0x15, 0x16, 0x17, 0x18, 0x19, 0x51, 0x5b, 0x52, 0x53, 0x54, 0x55, 0x1a, 0x1b, 0x1c, 0x1d, 30, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 40, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 50, 0x33, 0x56, 0x57, 0x58, 0x59, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b)

enctab = ("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "!", "#", "$", "%", "&", "(", ")", "*", "+", ",", ".", " ", ":", ";", "<", "=", ">", "?", "@", "[", "]", "^", "_", "`", "{", "|", "}", "~", "\'")

def decode(in_str, width = 1):
    total = len(in_str)
    val = -1
    queue = 0
    nbits = 0
    int_val = 0
    output = []
    g = 0
    
    for char in in_str:
        d = dectab[ord(char)]
        if d == 91:
            continue
        if val == -1:
            val = d
        else:
            val += d * 91
            queue |= val << nbits;
            nbits += {True: 13, False: 14}[(val & 8191) > 88]
            while True:
               int_val = (int_val << 8)
               int_val |= queue & 0xff
               g += 1
               if g == width:
                   output.append(int_val)
                   int_val = 0
                   g = 0
               queue = queue >> 8
               nbits -= 8
               if nbits < 8:
                   break
            val = -1

    # decode end
    if val != -1:
        int_val = int_val << 8
        int_val |= queue | (val << nbits)
        g += 1
        if g == width:
            output.append(int_val)
            int_val = 0
            g = 0

    return output

def decpart(in_str, count = 1, offset = 0):
    output = 0
    idx = 0
    column = 1
    for char in in_str[offset:offset+count+1]:
        b91 = ord(char)
        if b91 == ord('-'):
            return output
        output += column * dectab[b91]
        column *= 91
    return output

def encpart(value, count):
    out_str = ""
    for i in range(count):
        out_str += enctab[value % 91]
        value /= 91;
    return out_str
